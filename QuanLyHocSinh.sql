CREATE DATABASE QUANLYHOCSINH

GO 
USE QUANLYHOCSINH

CREATE TABLE HOCSINH (
	MaHS VARCHAR(20) PRIMARY KEY,
	HoTen NVARCHAR(50) NOT NULL,
	GioiTinh NVARCHAR(3) NOT NULL,
	NgSinh SMALLDATETIME,
	DiaChi NVARCHAR(50),
	Email VARCHAR(50)
)

ALTER TABLE dbo.HOCSINH ADD CONSTRAINT CHECK_GIOITINH CHECK (GioiTinh = 'Nam' OR GioiTinh = N'Nữ')

CREATE TABLE GIAOVIEN (
	MaGV VARCHAR(20) PRIMARY KEY,
	HoTen NVARCHAR(50) NOT NULL,
	GioiTinh NVARCHAR(3) NOT NULL,
	NgSinh SMALLDATETIME,
	DiaChi NVARCHAR(50),
	Email VARCHAR(20)
)

ALTER TABLE dbo.GIAOVIEN ADD CONSTRAINT CHECK_GIOITINH_GV CHECK (GioiTinh = 'Nam' OR GioiTinh = N'Nữ')

CREATE TABLE KHOILOP (
	MaKhoiLop VARCHAR(20) PRIMARY KEY,
	TenKhoiLop NVARCHAR(50) NOT NULL
)

CREATE TABLE NAMHOC (
	MaNam VARCHAR(20) PRIMARY KEY,
	Nam1 INT,
	Nam2 INT,
)

ALTER TABLE dbo.NAMHOC ADD CONSTRAINT CHECK_NAM CHECK (Nam1 < Nam2)

CREATE TABLE HOCKY (
	MaHocKy VARCHAR(20) PRIMARY KEY,
	HocKy INT CHECK (HocKy > 0),
	MaNam VARCHAR(20) FOREIGN KEY REFERENCES dbo.NAMHOC(MaNam),
	NgayBD SMALLDATETIME,
	NgayKT SMALLDATETIME
)

ALTER TABLE HOCKY ADD CONSTRAINT CHECK_THOIGIAN CHECK (NgayBD < NgayKT)

CREATE TABLE LOP (
	MaLop VARCHAR(20),
	MaHocKy VARCHAR(20) FOREIGN KEY REFERENCES dbo.HOCKY(MaHocKy),
	TenLop NVARCHAR(50) NOT NULL,
	MaKhoiLop VARCHAR(20) FOREIGN KEY REFERENCES dbo.KHOILOP (MaKhoiLop),
	SiSo INT CHECK (SiSo >= 0),
	PRIMARY KEY (MaLop, MaHocKy)
)

CREATE TABLE MONHOC (
	MaMH VARCHAR(20) PRIMARY KEY,
	TenMH NVARCHAR(50) NOT NULL,
	MoTa NVARCHAR(50),
	HeSo INT
)

CREATE TABLE LOP_MONHOC (
	MaMH VARCHAR(20) FOREIGN KEY REFERENCES dbo.MONHOC(MaMH),
	MaGV VARCHAR(20) FOREIGN KEY REFERENCES dbo.GIAOVIEN(MaGV),
	MaLop VARCHAR(20),
	PRIMARY KEY(MaMH, MaGV, MaLop)
)

CREATE TABLE KETQUAHOCMON (
	MaQTHoc INT IDENTITY(1,1),
	MaMH VARCHAR(20) FOREIGN KEY REFERENCES dbo.MONHOC(MaMH),
	DiemTBMon FLOAT,
	MaHS VARCHAR(20) FOREIGN KEY REFERENCES dbo.HOCSINH(MaHS),
	MaHocKy VARCHAR(20) FOREIGN KEY REFERENCES dbo.HOCKY(MaHocKy),
	PRIMARY KEY(MaQTHoc)
)

CREATE TABLE HOCSINH_LOP (
	MaHS VARCHAR(20) FOREIGN KEY REFERENCES dbo.HOCSINH(MaHS),
	MaLop VARCHAR(20),
	DiemTBHK FLOAT,
	MaQTHoc INT,
	PRIMARY KEY(MaHS, MaLop)
)

ALTER TABLE dbo.HOCSINH_LOP ADD CONSTRAINT FK_HSLOP_KQHM FOREIGN KEY (MaQTHoc) REFERENCES dbo.KETQUAHOCMON(MaQTHoc)

CREATE TABLE LOAIHINHKIEMTRA (
	MaLHKT VARCHAR(20) PRIMARY KEY,
	TenLHKT NVARCHAR(50) NOT NULL,
	HeSo INT
)

CREATE TABLE CT_HOCMON (
	MaCTHocMon INT IDENTITY(1,1) PRIMARY KEY,
	Diem FLOAT,
	MaQTHoc INT,
	MaLHKT VARCHAR(20) FOREIGN KEY REFERENCES dbo.LOAIHINHKIEMTRA(MaLHKT),
	MaMH VARCHAR(20) FOREIGN KEY REFERENCES dbo.MONHOC(MaMH)
)

ALTER TABLE dbo.CT_HOCMON ADD CONSTRAINT FK_CTHM_KQHM FOREIGN KEY (MaQTHoc) REFERENCES dbo.KETQUAHOCMON(MaQTHoc)

CREATE TABLE BAOCAOMONHOC (
	MaHocKy VARCHAR(20) FOREIGN KEY REFERENCES dbo.HOCKY(MaHocKy),
	MaMH VARCHAR(20) FOREIGN KEY REFERENCES dbo.MONHOC(MaMH),
	MaLop VARCHAR(20),
	SoLuongDat INT,
	TiLe FLOAT,
	PRIMARY KEY(MaHocKy, MaMH, MaLop)
)

CREATE TABLE BAOCAOHOCKY (
	MaHocKy VARCHAR(20) FOREIGN KEY REFERENCES dbo.HOCKY(MaHocKy),
	MaLop VARCHAR(20),
	SoLuongDat INT,
	TiLe FLOAT,
	PRIMARY KEY(MaHocKy, MaLop)	
)

CREATE TABLE THAMSO (
	TenThamSo VARCHAR(20) PRIMARY KEY,
	GiaTri FLOAT NOT NULL
)

CREATE TABLE BAIDANG (
	MaBaiDang INT PRIMARY KEY,
	TieuDe NVARCHAR(MAX) NOT NULL,
	NgayDang SMALLDATETIME NOT NULL,
	NoiDung NVARCHAR(MAX)
)



GO
-- 1. YÊU CẦU TIẾP NHẬN HỌC SINH
GO 
----  1.1 KIỂM TRA TUỔI TIẾP NHẬN HỌC SINH 
CREATE TRIGGER [dbo].[TRG_KiemTraTuoi] ON [dbo].[HOCSINH] FOR INSERT, UPDATE AS
BEGIN
	DECLARE @TuoiToiDa INT, @TuoiToiThieu INT, @TuoiHS INT
	SELECT @TuoiToiDa = GiaTri FROM dbo.THAMSO WHERE TenThamSo = N'TuoiToiDa'
	SELECT @TuoiToiThieu = GiaTri FROM dbo.THAMSO WHERE TenThamSo = N'TuoiToiThieu'

	SELECT @TuoiHS = FLOOR((CAST (GetDate() AS INTEGER) - CAST(NgSinh AS INTEGER)) / 365.25)
	FROM Inserted
	IF(@TuoiHS > @TuoiToiDa OR @TuoiHS < @TuoiToiThieu)
	BEGIN
	    PRINT N'Tuổi không hợp lệ'
		ROLLBACK TRANSACTION
	END
	ELSE
    BEGIN
        PRINT N'Thêm thành công!'
    END
END
GO
----  1.2 XÓA HỌC SINH
CREATE TRIGGER [dbo].[TRG_DEL_HOCSINH] ON [dbo].[HOCSINH] INSTEAD OF DELETE
AS
BEGIN
	DECLARE @MaHS VARCHAR(20), @MaQTHoc INT
	SELECT @MaHS = Deleted.MaHS FROM Deleted 
	SELECT @MaQTHoc = MaQTHoc FROM dbo.KETQUAHOCMON WHERE MaHS = @MaHS
	DELETE FROM dbo.CT_HOCMON WHERE MaQTHoc = @MaQTHoc
	DELETE FROM dbo.KETQUAHOCMON WHERE MaHS = @MaHS
	DELETE FROM dbo.HOCSINH_LOP WHERE MaHS = @MaHS
	DELETE FROM dbo.HOCSINH WHERE MaHS = @MaHS
END
GO 
-- 2. LẬP DANH SÁCH LỚP
GO
----  2.1. KIỂM TRA SỈ SỐ LỚP
CREATE TRIGGER [dbo].[TRG_SISO] ON [dbo].[HOCSINH_LOP] FOR INSERT AS 
BEGIN
	DECLARE @MaLop VARCHAR(20), @SiSo INT, @SiSoToiDa INT

	SELECT @SiSoToiDa = GiaTri  FROM dbo.THAMSO WHERE TenThamSo = N'SiSoToiDa'
	PRINT @SiSoToiDa
	DECLARE MyCursor CURSOR FOR SELECT HOCSINH_LOP.MaLop, COUNT(HOCSINH_LOP.MaHS) AS SiSo FROM dbo.LOP INNER JOIN HOCSINH_LOP ON HOCSINH_LOP.MaLop = LOP.MaLop
	GROUP BY HOCSINH_LOP.MaLop, LOP.MaHocKy

	OPEN MyCursor 
	FETCH MyCursor INTO @MaLop, @SiSo 
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
	 PRINT @SiSoToiDa
	 PRINT @SiSo
	 IF (@SiSo > @SiSoToiDa)
	 BEGIN
		 PRINT N'[2] Sỉ số lớp vượt qua mức tối đa!'
		 ROLLBACK TRANSACTION
		 END
	 ELSE
		 BEGIN
		 PRINT N'[2] Thêm thành công!'
	 END
	 FETCH NEXT FROM MyCursor INTO @MaLop, @SiSo 
	END
	CLOSE MyCursor 
	DEALLOCATE MyCursor 
END 
GO 
----  2.2. CẬP NHẬT SỈ SỐ LỚP
CREATE TRIGGER [dbo].[TRG_UPDATE_SISO] ON [dbo].[HOCSINH_LOP] FOR INSERT,UPDATE,DELETE AS 
BEGIN
    DECLARE @MaLop VARCHAR(20), @SoLuong INT

    DECLARE MyCursor CURSOR FOR 
		SELECT DISTINCT LOP.MaLop, COUNT(MaHS) AS SoLuong
		FROM dbo.LOP INNER JOIN dbo.HOCSINH_LOP ON HOCSINH_LOP.MaLop = LOP.MaLop
		GROUP BY LOP.MaLop, MaHocKy

	OPEN MyCursor 
	FETCH MyCursor INTO @MaLop, @SoLuong
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
	    UPDATE dbo.LOP SET SiSo = @SoLuong
		WHERE MaLop = @MaLop

		FETCH NEXT FROM MyCursor INTO @MaLop, @SoLuong
	END
	CLOSE MyCursor
	DEALLOCATE MyCursor
END
GO
----  2.3. TỰ ĐỘNG CẬP NHẬT LẠI THÔNG TIN BÁO CÁO KHI CÓ SỰ THAY ĐỔI VỀ THÔNG TIN LỚP (XÉT TRÊN ĐIỂM ĐẠT MÔN)
CREATE TRIGGER [dbo].[TRG_BAOCAOMONHOC] ON [dbo].[HOCSINH_LOP] FOR INSERT, UPDATE, DELETE AS 
BEGIN

    DECLARE @MaHocKy VARCHAR(20), @MaLop VARCHAR(20), @MaMH VARCHAR(20), @SoLuongDat INT, @DiemDatMon INT, @SiSo INT, @TiLe FLOAT
	SELECT @DiemDatMon = GiaTri FROM dbo.THAMSO WHERE TenThamSo = 'DiemDatMon'

    DECLARE MyCursorTuTinhBaoCaoMH CURSOR FOR 
		SELECT DISTINCT KETQUAHOCMON.MaHocKy, LOP_MONHOC.MaLop, LOP_MONHOC.MaMH, COUNT(IIF(DiemTBMon >= @DiemDatMon, 1, NULL)) AS SoLuongDat, SiSo
		FROM dbo.HOCSINH_LOP INNER JOIN dbo.KETQUAHOCMON ON KETQUAHOCMON.MaHS = HOCSINH_LOP.MaHS  FULL JOIN dbo.LOP_MONHOC ON LOP_MONHOC.MaMH = KETQUAHOCMON.MaMH FULL JOIN dbo.LOP ON LOP.MaLop = LOP_MONHOC.MaLop AND LOP.MaLop = HOCSINH_LOP.MaLop
		WHERE DiemTBMon IS NOT NULL AND KETQUAHOCMON.MaHocKy IS NOT NULL
		GROUP BY KETQUAHOCMON.MaHocKy, LOP_MONHOC.MaLop, LOP_MONHOC.MaMH, SiSo

	OPEN MyCursorTuTinhBaoCaoMH 
	FETCH MyCursorTuTinhBaoCaoMH INTO @MaHocKy, @MaLop, @MaMH, @SoLuongDat, @SiSo
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
	    IF EXISTS (SELECT * FROM dbo.BAOCAOMONHOC WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop AND MaMH = @MaMH)
		BEGIN
			IF (@SiSo = 0)
			BEGIN
			    UPDATE dbo.BAOCAOMONHOC SET SoLuongDat = @SoLuongDat, TiLe = 0
				WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop AND MaMH = @MaMH
			END
			ELSE 
			BEGIN
				SET @TiLe = @SoLuongDat / @SiSo
			    UPDATE dbo.BAOCAOMONHOC SET SoLuongDat = @SoLuongDat, TiLe = @TiLe
				WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop AND MaMH = @MaMH
			END
		
		END
		ELSE 
		BEGIN
			IF (@SiSo = 0)
			BEGIN
			    INSERT INTO dbo.BAOCAOMONHOC(MaHocKy,MaLop,MaMH,SoLuongDat,TiLe)
				VALUES(@MaHocKy, @MaLop, @MaMH, @SoLuongDat, 0)
			END
			ELSE
			BEGIN
				SET @TiLe = @SoLuongDat / @SiSo
			    INSERT INTO dbo.BAOCAOMONHOC(MaHocKy,MaLop,MaMH,SoLuongDat,TiLe)
				VALUES(@MaHocKy, @MaLop, @MaMH, @SoLuongDat, @TiLe)
			END
		    
		END
		FETCH NEXT FROM MyCursorTuTinhBaoCaoMH INTO @MaHocKy, @MaLop, @MaMH, @SoLuongDat, @SiSo
	END
	CLOSE MyCursorTuTinhBaoCaoMH
	DEALLOCATE MyCursorTuTinhBaoCaoMH
END
GO 
-- 3. TRA CỨU HỌC SINH
SELECT HOCSINH.MaHS, HoTen, TenLop, HocKy, DiemTBHK
FROM dbo.HOCSINH_LOP 
	INNER JOIN dbo.HOCSINH ON HOCSINH.MaHS = HOCSINH_LOP.MaHS
	INNER JOIN dbo.LOP ON LOP.MaLop = HOCSINH_LOP.MaLop
	INNER JOIN dbo.HOCKY ON HOCKY.MaHocKy = LOP.MaHocKy
GO
-- 4. NHẬN BẢNG ĐIỂM MÔN
GO
----  4.1. KIỂM TRA THÔNG TIN ĐIỂM
CREATE TRIGGER [dbo].[TRG_KiemTraDiem] ON [dbo].[CT_HOCMON] FOR INSERT, UPDATE AS
BEGIN
	DECLARE @DiemToiDa INT, @DiemToiThieu INT, @Diem FLOAT
	SELECT @DiemToiDa = GiaTri FROM dbo.THAMSO WHERE TenThamSo = N'DiemToiDa'
	SELECT @DiemToiThieu = GiaTri FROM dbo.THAMSO WHERE TenThamSo = N'DiemToiThieu'

	SELECT @Diem = Diem FROM Inserted
	IF(@Diem > @DiemToiDa OR @Diem < @DiemToiThieu)
	BEGIN
	    PRINT N'Điểm không hợp lệ'
		ROLLBACK TRANSACTION
	END
	ELSE
    BEGIN
        PRINT N'Thêm thành công!'
    END
END

GO 
----  4.2. LƯU ĐIỂM
CREATE PROCEDURE [dbo].[XULYDIEM] AS 
BEGIN
    DECLARE @MaHS VARCHAR(20), @MaMH VARCHAR(20), @MaLop VARCHAR(20), @HocKy INT, @MaLHKT VARCHAR(20), @Diem FLOAT, @MaQTHoc INT
	
	IF NOT EXISTS(
		SELECT * 
		FROM KETQUAHOCMON WHERE MaHS = @MaHS AND MaHocKy = 'HK00' + @HocKy
	) BEGIN
	      INSERT KETQUAHOCMON (MaMH, MaHS, MaHocKy) 
		  VALUES (@MaMH, @MaHS, 'HK00' + @HocKy)
	  END 

	SELECT @MaQTHoc = MaQTHoc
	FROM dbo.KETQUAHOCMON WHERE MaMH = @MaMH AND MaHS = @MaHS AND MaHocKy = 'HK00' + @HocKy

	IF NOT EXISTS(
		SELECT * FROM dbo.CT_HOCMON WHERE MaQTHoc = @MaQTHoc
	) BEGIN
		INSERT INTO  dbo.CT_HOCMON (Diem, MaQTHoc, MaLHKT, MaMH) VALUES (@Diem, @MaQTHoc, @MaLHKT, @MaMH)
	  END
	ELSE BEGIN
	         UPDATE dbo.CT_HOCMON SET Diem = @Diem WHERE MaQTHoc = @MaQTHoc AND MaLHKT = @MaLHKT
	     END
END
GO
----  4.3. XEM ĐIỂM THEO LỚP
SELECT DISTINCT HOCSINH.MaHS, HoTen, KQHM.MaLHKT, KQHM.Diem, LOP.MaLop, TenLop FROM (
                    SELECT MaHS, MaLHKT, Diem, DiemTBMon
                    FROM dbo.KETQUAHOCMON INNER JOIN dbo.CT_HOCMON ON CT_HOCMON.MaQTHoc = KETQUAHOCMON.MaQTHoc
                    WHERE MaMH = 'TOAN10' AND KETQUAHOCMON.MaHocKy = 'HK001' AND MaLHKT = 'KT15P'
                    ) KQHM RIGHT JOIN dbo.HOCSINH ON HOCSINH.MaHS = KQHM.MaHS INNER JOIN dbo.HOCSINH_LOP ON HOCSINH_LOP.MaHS = HOCSINH.MaHS INNER JOIN dbo.LOP ON LOP.MaLop = HOCSINH_LOP.MaLop INNER JOIN dbo.LOP_MONHOC ON LOP_MONHOC.MaLop = LOP.MaLop
                WHERE MaMH = 'TOAN10' AND LOP.MaLop = 'TN101' 
GO
----  4.4. TÍNH ĐIỂM TRUNG BÌNH MÔN THEO MÃ QUÁ TRÌNH HỌC
CREATE FUNCTION [dbo].[TINH_DIEMTB] (@MaQTHoc INT)
RETURNS FLOAT AS
BEGIN
	DECLARE @HeSo INT, @Diem FLOAT, @DiemTB FLOAT, @TongHeSo INT
	SET @DiemTB = 0
	SET @TongHeSo = 0

    DECLARE MyCursor CURSOR FOR 
		SELECT HeSo, Diem
		FROM dbo.LOAIHINHKIEMTRA INNER JOIN dbo.CT_HOCMON ON CT_HOCMON.MaLHKT = LOAIHINHKIEMTRA.MaLHKT
		WHERE MaQTHoc = @MaQTHoc

	OPEN MyCursor 
	FETCH MyCursor INTO @HeSo, @Diem
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
	    SET @DiemTB = @DiemTB + @Diem * @HeSo
		SET @TongHeSo = @TongHeSo + @HeSo
		FETCH NEXT FROM MyCursor INTO @HeSo, @Diem
	END
	CLOSE MyCursor
	DEALLOCATE MyCursor

	RETURN @DiemTB / @TongHeSo
END
GO
----  4.5. TÍNH ĐIỂM TRUNG BÌNH THEO TỪNG HỌC KỲ
CREATE FUNCTION [dbo].[TINH_DIEMTB_HOCKY] (@MaHS VARCHAR(20), @MaHocKy VARCHAR(20))
RETURNS FLOAT AS
BEGIN
	DECLARE @HeSo INT, @DiemTBMon FLOAT, @DiemTBHK FLOAT, @TongHeSo INT
	SET @DiemTBHK = 0
	SET @TongHeSo = 0

    DECLARE MyCursor CURSOR FOR 
		SELECT HeSo, DiemTBMon
		FROM dbo.KETQUAHOCMON INNER JOIN dbo.MONHOC ON MONHOC.MaMH = KETQUAHOCMON.MaMH
		WHERE MaHS = @MaHS AND DiemTBMon IS NOT NULL AND MaHocKy = @MaHocKy

	OPEN MyCursor 
	FETCH MyCursor INTO @HeSo, @DiemTBMon
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
	    SET @DiemTBHK = @DiemTBHK + @DiemTBMon * @HeSo
		SET @TongHeSo = @TongHeSo + @HeSo
		FETCH NEXT FROM MyCursor INTO @HeSo, @DiemTBMon
	END
	CLOSE MyCursor
	DEALLOCATE MyCursor

	IF(@TongHeSo = 0)
	BEGIN
	    RETURN @DiemTBHK
	END

	RETURN @DiemTBHK / @TongHeSo
END
GO
-- 5. LẬP BÁO CÁO TỔNG KẾT
GO
----  5.1 LẬP BÁO CÁO TỔNG KẾT KỲ 1
CREATE TRIGGER [dbo].[TRG_BAOCAOHOCKY1_THAMSO] ON [dbo].[THAMSO] FOR UPDATE AS 
BEGIN
    DECLARE @MaHocKy VARCHAR(20), @MaLop VARCHAR(20), @SoLuongDat INT, @DiemDat INT, @SiSo INT, @TiLe FLOAT
	SELECT @DiemDat = GiaTri FROM dbo.THAMSO WHERE TenThamSo = 'DiemDat'

    DECLARE MyCursorTuTinhBaoCaoHK1_TS CURSOR FOR 
		SELECT DISTINCT KETQUAHOCMON.MaHocKy, LOP_MONHOC.MaLop, COUNT(IIF(DiemTBHK >= @DiemDat, 1, NULL)) AS SoLuongDat, SiSo
		FROM dbo.HOCSINH_LOP INNER JOIN dbo.KETQUAHOCMON ON KETQUAHOCMON.MaHS = HOCSINH_LOP.MaHS  FULL JOIN dbo.LOP_MONHOC ON LOP_MONHOC.MaMH = KETQUAHOCMON.MaMH FULL JOIN dbo.LOP ON LOP.MaLop = LOP_MONHOC.MaLop AND LOP.MaLop = HOCSINH_LOP.MaLop
		WHERE DiemTBMon IS NOT NULL AND KETQUAHOCMON.MaHocKy IS NOT NULL AND SiSo IS NOT NULL AND KETQUAHOCMON.MaHocKy = 'HK001'
		GROUP BY KETQUAHOCMON.MaHocKy, LOP_MONHOC.MaLop, SiSo

	OPEN MyCursorTuTinhBaoCaoHK1_TS 
	FETCH MyCursorTuTinhBaoCaoHK1_TS INTO @MaHocKy, @MaLop, @SoLuongDat, @SiSo
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
	    IF EXISTS (SELECT * FROM dbo.BAOCAOHOCKY WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop)
		BEGIN
			IF (@SiSo = 0)
			BEGIN
			    UPDATE dbo.BAOCAOMONHOC SET SoLuongDat = @SoLuongDat, TiLe = 0
				WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop
			END
			ELSE 
			BEGIN
				SET @TiLe = @SoLuongDat / @SiSo
			    UPDATE dbo.BAOCAOMONHOC SET SoLuongDat = @SoLuongDat, TiLe = @TiLe
				WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop
			END
		
		END
		ELSE 
		BEGIN
			IF (@SiSo = 0)
			BEGIN
			    INSERT INTO dbo.BAOCAOHOCKY(MaHocKy,MaLop,SoLuongDat,TiLe)
				VALUES(@MaHocKy, @MaLop, @SoLuongDat, 0)
			END
			ELSE
			BEGIN
				SET @TiLe =  @SoLuongDat/@SiSo
			    INSERT INTO dbo.BAOCAOHOCKY(MaHocKy,MaLop,SoLuongDat,TiLe)
				VALUES(@MaHocKy, @MaLop, @SoLuongDat, @TiLe)
			END
		    
		END
		FETCH NEXT FROM MyCursorTuTinhBaoCaoHK1_TS INTO @MaHocKy, @MaLop, @SoLuongDat, @SiSo
	END
	CLOSE MyCursorTuTinhBaoCaoHK1_TS
	DEALLOCATE MyCursorTuTinhBaoCaoHK1_TS
END
GO 
----  5.2 LẬP BÁO CÁO TỔNG KẾT KỲ 2
CREATE TRIGGER [dbo].[TRG_BAOCAOHOCKY2_THAMSO] ON [dbo].[THAMSO] FOR UPDATE AS 
BEGIN
    DECLARE @MaHocKy VARCHAR(20), @MaLop VARCHAR(20), @SoLuongDat INT, @DiemDat INT, @SiSo INT, @TiLe FLOAT
	SELECT @DiemDat = GiaTri FROM dbo.THAMSO WHERE TenThamSo = 'DiemDat'

    DECLARE MyCursorTuTinhBaoCaoHK2_TS CURSOR FOR 
		SELECT DISTINCT KETQUAHOCMON.MaHocKy, LOP_MONHOC.MaLop, COUNT(IIF(DiemTBHK >= @DiemDat, 1, NULL)) AS SoLuongDat, SiSo
		FROM dbo.HOCSINH_LOP INNER JOIN dbo.KETQUAHOCMON ON KETQUAHOCMON.MaHS = HOCSINH_LOP.MaHS  FULL JOIN dbo.LOP_MONHOC ON LOP_MONHOC.MaMH = KETQUAHOCMON.MaMH FULL JOIN dbo.LOP ON LOP.MaLop = LOP_MONHOC.MaLop AND LOP.MaLop = HOCSINH_LOP.MaLop
		WHERE DiemTBMon IS NOT NULL AND KETQUAHOCMON.MaHocKy IS NOT NULL AND SiSo IS NOT NULL AND KETQUAHOCMON.MaHocKy = 'HK002'
		GROUP BY KETQUAHOCMON.MaHocKy, LOP_MONHOC.MaLop, SiSo

	OPEN MyCursorTuTinhBaoCaoHK2_TS 
	FETCH MyCursorTuTinhBaoCaoHK2_TS INTO @MaHocKy, @MaLop, @SoLuongDat, @SiSo
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
	    IF EXISTS (SELECT * FROM dbo.BAOCAOHOCKY WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop)
		BEGIN
			IF (@SiSo = 0)
			BEGIN
			    UPDATE dbo.BAOCAOMONHOC SET SoLuongDat = @SoLuongDat, TiLe = 0
				WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop
			END
			ELSE 
			BEGIN
				SET @TiLe = @SoLuongDat / @SiSo
			    UPDATE dbo.BAOCAOMONHOC SET SoLuongDat = @SoLuongDat, TiLe = @TiLe
				WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop
			END
		
		END
		ELSE 
		BEGIN
			IF (@SiSo = 0)
			BEGIN
			    INSERT INTO dbo.BAOCAOHOCKY(MaHocKy,MaLop,SoLuongDat,TiLe)
				VALUES(@MaHocKy, @MaLop, @SoLuongDat, 0)
			END
			ELSE
			BEGIN
				SET @TiLe =  @SoLuongDat/@SiSo
			    INSERT INTO dbo.BAOCAOHOCKY(MaHocKy,MaLop,SoLuongDat,TiLe)
				VALUES(@MaHocKy, @MaLop, @SoLuongDat, @TiLe)
			END
		    
		END
		FETCH NEXT FROM MyCursorTuTinhBaoCaoHK2_TS INTO @MaHocKy, @MaLop, @SoLuongDat, @SiSo
	END
	CLOSE MyCursorTuTinhBaoCaoHK2_TS
	DEALLOCATE MyCursorTuTinhBaoCaoHK2_TS
END
GO
----  5.3 LẬP BÁO CÁO TỔNG KẾT MÔN
CREATE TRIGGER [dbo].[TRG_BAOCAOMONHOC_THAMSO] ON [dbo].[THAMSO] FOR UPDATE AS 
BEGIN
    DECLARE @MaHocKy VARCHAR(20), @MaLop VARCHAR(20), @MaMH VARCHAR(20), @SoLuongDat INT, @DiemDatMon INT, @SiSo INT, @TiLe FLOAT
	SELECT @DiemDatMon = GiaTri FROM dbo.THAMSO WHERE TenThamSo = 'DiemDatMon'

    DECLARE MyCursorTuTinhBaoCaoMH_TS CURSOR FOR 
		SELECT DISTINCT LOP.MaHocKy, HOCSINH_LOP.MaLop, KETQUAHOCMON.MaMH, COUNT(DISTINCT DiemTBMon) AS SoLuongDat, SiSo
		FROM dbo.KETQUAHOCMON INNER JOIN dbo.HOCSINH_LOP ON HOCSINH_LOP.MaHS = KETQUAHOCMON.MaHS INNER JOIN dbo.LOP_MONHOC ON LOP_MONHOC.MaMH = KETQUAHOCMON.MaMH AND LOP_MONHOC.MaLop = HOCSINH_LOP.MaLop INNER JOIN LOP ON LOP.MaHocKy = KETQUAHOCMON.MaHocKy AND LOP.MaLop = HOCSINH_LOP.MaLop
		WHERE DiemTBMon IS NOT NULL AND SiSo IS NOT NULL AND DiemTBMon >= @DiemDatMon
		GROUP BY KETQUAHOCMON.MaMH, LOP.MaHocKy, HOCSINH_LOP.MaLop, SiSo

	OPEN MyCursorTuTinhBaoCaoMH_TS 
	FETCH MyCursorTuTinhBaoCaoMH_TS INTO @MaHocKy, @MaLop, @MaMH, @SoLuongDat, @SiSo
	WHILE (@@FETCH_STATUS = 0)
	BEGIN
	    IF EXISTS (SELECT * FROM dbo.BAOCAOMONHOC WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop AND MaMH = @MaMH)
		BEGIN
			IF (@SiSo = 0)
			BEGIN
			    UPDATE dbo.BAOCAOMONHOC SET SoLuongDat = @SoLuongDat, TiLe = 0
				WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop AND MaMH = @MaMH
			END
			ELSE 
			BEGIN
				SET @TiLe = @SoLuongDat / @SiSo
			    UPDATE dbo.BAOCAOMONHOC SET SoLuongDat = @SoLuongDat, TiLe = @TiLe
				WHERE MaHocKy = @MaHocKy AND MaLop = @MaLop AND MaMH = @MaMH
			END
		
		END
		ELSE 
		BEGIN
			IF (@SiSo = 0)
			BEGIN
			    INSERT INTO dbo.BAOCAOMONHOC(MaHocKy,MaLop,MaMH,SoLuongDat,TiLe)
				VALUES(@MaHocKy, @MaLop, @MaMH, @SoLuongDat, 0)
			END
			ELSE
			BEGIN
				SET @TiLe =  @SoLuongDat/@SiSo
			    INSERT INTO dbo.BAOCAOMONHOC(MaHocKy,MaLop,MaMH,SoLuongDat,TiLe)
				VALUES(@MaHocKy, @MaLop, @MaMH, @SoLuongDat, @TiLe)
			END
		    
		END
		FETCH NEXT FROM MyCursorTuTinhBaoCaoMH_TS INTO @MaHocKy, @MaLop, @MaMH, @SoLuongDat, @SiSo
	END
	CLOSE MyCursorTuTinhBaoCaoMH_TS
	DEALLOCATE MyCursorTuTinhBaoCaoMH_TS
END